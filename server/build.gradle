buildscript {
  repositories {
    gradlePluginPortal()
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    classpath "org.grails.plugins:hibernate5:7.2.0"
    classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.7"
    classpath "com.github.node-gradle:gradle-node-plugin:3.1.1"
    classpath "com.dorongold.plugins:task-tree:2.1.0"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:2.7.1"
    classpath "com.bmuschko:gradle-docker-plugin:7.4.0"
    classpath "org.grails.plugins:hibernate:4.3.8.0"
    classpath "org.grails.plugins:views-gradle:2.2.1"
  }
}

version "1.17.22"
group "hpo.api"

apply plugin: "idea"
apply plugin: "war"
apply plugin: "java"
apply plugin: "org.grails.grails-web"
apply plugin: "com.github.erdi.webdriver-binaries"
apply plugin: "com.github.node-gradle.node"
apply plugin: "com.dorongold.task-tree"
apply plugin: "org.springframework.boot"
apply plugin: "com.bmuschko.docker-spring-boot-application"
apply plugin:"org.grails.plugins.views-json"

sourceCompatibility = 1.11

repositories {
  mavenLocal()
  maven { url "https://repo.grails.org/grails/core" }
}

configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
}

dependencies {
  profile "org.grails.profiles:angular"
  developmentOnly("org.springframework.boot:spring-boot-devtools")
  compileOnly "io.micronaut:micronaut-inject-groovy"
  console "org.grails:grails-console"
  implementation "org.grails:grails-core"
  implementation "org.springframework.boot:spring-boot-starter-logging"
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-autoconfigure"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  developmentOnly("org.springframework.boot:spring-boot-starter-tomcat")
  implementation "org.grails:grails-plugin-url-mappings"
  implementation "org.grails:grails-plugin-rest"
  implementation "org.grails:grails-plugin-codecs"
  implementation "org.grails:grails-plugin-interceptors"
  implementation "org.grails:grails-plugin-services"
  implementation "org.grails:grails-plugin-datasource"
  implementation "org.grails:grails-plugin-databinding"
  implementation "org.grails:grails-web-boot"
  implementation "org.grails:grails-logging"
  implementation "org.grails.plugins:cache"
  implementation "org.grails.plugins:async"
  implementation "org.grails.plugins:hibernate5"
  implementation "org.grails.plugins:converters"
  implementation "org.hibernate:hibernate-core:5.6.3.Final"
  implementation "org.grails.plugins:views-json:2.0.4"
  implementation "org.grails.plugins:views-json-templates"
  implementation 'builders.dsl:spreadsheet-builder-poi:1.0.5'
  implementation 'builders.dsl:spreadsheet-builder-groovy:1.0.5'
  // Raw jar file for loinc2hpo
  implementation files('libs/loinc2hpo-core.jar')
  implementation 'org.monarchinitiative.phenol:phenol-core:2.0.0'
  implementation 'org.monarchinitiative.phenol:phenol-io:2.0.0'
  implementation 'org.monarchinitiative.phenol:phenol-annotations:2.0.0'
  implementation 'com.bertramlabs.plugins:asset-pipeline-grails:3.3.4'
  runtimeOnly 'mysql:mysql-connector-java:8.0.29'
  runtimeOnly 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.6.2'
  runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
  runtimeOnly "org.apache.tomcat:tomcat-jdbc"
  runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
  testImplementation "io.micronaut:micronaut-inject-groovy"
  testImplementation "org.grails:grails-gorm-testing-support"

  testImplementation "org.grails.plugins:geb"
  testImplementation 'org.gebish:geb-spock'
  testImplementation "io.micronaut:micronaut-http-client"
  testImplementation "org.grails:grails-web-testing-support"
  testImplementation "org.grails:views-json-testing-support"
  testImplementation "org.hibernate.validator:hibernate-validator:6.1.7.Final"

  testRuntimeOnly 'net.sourceforge.htmlunit:htmlunit:2.35.0'
  testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
  testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
  testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
  testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
}

bootRun {
  ignoreExitValue true
  jvmArgs(
    '-Dspring.output.ansi.enabled=always',
    '-noverify',
    '-XX:TieredStopAtLevel=1',
    '-Xmx1024m')
  sourceResources sourceSets.main
}

tasks.withType(GroovyCompile) {
  configure(groovyOptions) {
    forkOptions.jvmArgs = ['-Xmx1024m']
  }
}

tasks.withType(Test) {
  useJUnitPlatform()
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
}

node {
  nodeProjectDir = file("../client/")
}

task buildClientDevelopment(type: NpxTask, dependsOn: npmInstall) {
  group = 'build'
  description = 'Compile client side assets for development'
  command = 'npm'
  args = ['run', 'build']
}

task buildClientProduction(type: NpxTask, dependsOn: npmInstall){
  group = 'build'
  description = 'Compile client side assets for production'
  command = 'npm'
  args = ['run', 'buildProd']
}

task clientTest(type: NpxTask, dependsOn: npmInstall) {
  group = 'verification'
  description = 'Executes client side unit tests'
  command = 'npm'
  args = ['run', 'test']
}

task clientIntegrationTest(type: NpxTask, dependsOn: npmInstall) {
  group = 'verification'
  description = 'Executes client side integration tests'
  command = 'npm'
  args = ['run', 'e2e']
}

war {
  def env = System.getProperty("grails.env")
  if (env != 'production'){
    archiveFileName = "hpo-web-${project.version}-SNAPSHOT.war_"
  } else {
    archiveFileName = "hpo-web-${project.version}.war_"
  }
}

webdriverBinaries {
  chromedriver "$chromeDriverVersion"
}

war.dependsOn(buildClientProduction)

//bootRun.dependsOn(buildClientDevelopment)
//test.dependsOn(clientTest)
integrationTest.dependsOn(buildClientDevelopment)

task test_all_headless(type: Test) {
  systemProperty "geb.env", "chromeHeadless"
  dependsOn(clientTest)
  dependsOn(test)
  dependsOn(integrationTest)
}

clean {
  delete fileTree(dir: "src/main/webapp")
}

docker {
  springBootApplication {
    baseImage = 'hpo-web-${project.version}'
  }
}

runCommand {
  systemProperty "spring.devtools.restart.enabled", false
}
