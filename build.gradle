buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.1.6"
 //       classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

version "0.1"
group "hpo.angular.app"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
//apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.moowork.node"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {

    compile 'com.github.phenomics:ontolib-core:0.3'
    compile 'com.github.phenomics:ontolib-io:0.3'

  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"

  compile "org.grails:grails-logging"

  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-datasource"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-web-boot"

  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.1.5.Final"
  compile "org.grails.plugins:views-json"
  compile "org.grails.plugins:views-json-templates"
  compile "org.grails.plugins:gsp"

  console "org.grails:grails-console"

  profile "org.grails.profiles:web"

  runtime 'org.grails.plugins:grails-console:2.1.1'
  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  runtime "com.h2database:h2"
  runtime "org.apache.tomcat:tomcat-jdbc"
  runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"

  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails.plugins:geb"
  testCompile "org.grails:grails-datastore-rest-client"
  testCompile "org.grails:grails-web-testing-support"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
  testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}


node {
    version = '8.4.0'
    npmVersion = '5.3.0'
    download = true
    nodeModulesDir = file("src/main/client")
}

task buildClientDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side assets for development'
    args = ['run', 'build']
}

task buildClientProd(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side assets for production'
    args = ['run', 'buildProd']
}

task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = 'Builds and watches the client side assets for rebuilding'
    args = ['run', 'buildWatch']
}

task clientTest(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'verification'
    description = 'Executes client side unit tests'
    args = ['run', 'test']
}

task clientIntegrationTest(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'verification'
    description = 'Executes client side integration tests'
    args = ['run', 'e2e']
}


war.dependsOn(buildClientProd)

test.dependsOn(clientTest)

//integrationTest.dependsOn(clientIntegrationTest)

clean {
    delete fileTree(dir: "src/main/webapp/app")
}

bootRun.dependsOn(buildClientDev)

bootRun {

    jvmArgs('-Dspring.output.ansi.enabled=always', '-Dgrails.reload.enabled=true')
    addResources = true
}
